#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

DOCKER_CONFIG_JSON='{
  "auths": {},
  "currentContext": "colima",
  "cliPluginsExtraDirs": [
    "/opt/homebrew/lib/docker/cli-plugins"
  ]
}'

init() {
    echo -e "${GREEN}Checking${NC} if Homebrew is installed..."

    # TODO: Make sure that brew installs automatically
    if ! brew --version &>/dev/null; then
        echo -e "${GREEN}Homebrew ${NC}is not installed. Installing now..."
        output=$(/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

        instructions=$(echo "$output" | sed -n '/PATH:$/,+3p')

        line1=$(echo "$instructions" | sed -n '2p')
        line2=$(echo "$instructions" | sed -n '3p')
        line3=$(echo "$instructions" | sed -n '4p')

        echo -e "${GREEN}Instructions to add Homebrew to your PATH:${NC}"

        echo -e "${GREEN}$line1"
        echo -e "${GREEN}$line2"
        echo -e "${GREEN}$line3"

        eval "$line1"
        eval "$line2"
        eval "$line3"

        if brew --version &>/dev/null; then
            echo -e "${GREEN}Homebrew installed successfully."
        else
            echo -e "${RED}Homebrew installation failed.\nTry manual installation of Homebrew.\nContat the developer."
            exit 1
        fi
    fi

    echo -e "${GREEN}Installing${NC} lima..."

    if [[ "$OSTYPE" == darwin* ]]; then
        brew install --formulae lima

        if ! limactl --version &>/dev/null; then
            echo -e "${RED}Lima installation failed.\nTry manual installation of Lima.\nContat the developer."
            exit 1
        fi

        limactl start x86_machine.yaml --vm-type=qemu --arch=x86_64 --tty=false
        limactl shell x86_machine sudo apt update
        limactl shell x86_machine sudo apt upgrade -y
        limactl shell x86_machine sudo apt install -y gcc g++-multilib
    fi
}

if [ $# -eq 1 ] && [ $1 == "init" ]; then
    if ls -1 | grep -E 'init' >/dev/null; then
        echo -e "${RED}There exists a file named 'init'. Please remove it and try again if you want to initialize the environment."
        exit 1
    fi
    init
    exit 0
fi

if [ -z "$IS_LIMA" ]; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if ! limactl --version &>/dev/null; then
            echo -e "${RED}Lima is not installed. Run the following command to install lima: ${GREEN}./run init"
            exit 1
        fi

        if ! limactl list | grep -E 'x86_machine' &>/dev/null; then
            echo -e "${GREEN}Starting${NC} lima x86_machine for the first time..."

            limactl start x86_machine.yaml --vm-type=qemu --arch=x86_64 --tty=false
            limactl shell x86_machine sudo apt update
            limactl shell x86_machine sudo apt upgrade -y
            limactl shell x86_machine sudo apt install -y gcc g++-multilib
        fi

        echo -e "Connecting to ${GREEN}lima x86_machine${NC}.\nRemember to run ${RED}exit${NC} or ${RED}Ctrl+D${NC} to exit the shell.\nMake sure to rerun ./run if you want to compile a new file."
        limactl shell x86_machine
        exit 0
    else
        echo -e "${RED}This script is only supported on macOS."
        exit 1
    fi
fi

if [ $# -eq 0 ]; then
    program_name=$(ls -1t | grep -E '\.(asm|s)$' | head -n 1)
    # extension=$(sed -r 's/(\.[^.]+$){1}//')

    echo -e "Going to compile the latest file: ${GREEN}" $program_name

    gcc -x assembler -m32 ${program_name} -o executable && ./executable && rm executable
else
    if [ $# -gt 1 ]; then
        echo "Pass only one argument."
        exit 1
    else
        program_name=$1

        echo -e "Going to compile given file: ${GREEN}" $program_name
        
        gcc -x assembler -m32 ${program_name} -o executable && ./executable && rm executable

    fi
fi
